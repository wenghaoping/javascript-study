// MDN 对闭包的定义为：

// 闭包是指那些能够访问自由变量的函数。

// 那什么是自由变量呢？

// 自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。

// 由此，我们可以看出闭包共有两部分组成：

// 闭包 = 函数 + 函数能够访问的自由变量

// 举个例子：

var a = 1;

function foo() {
    console.log(a);
}

foo();
// foo 函数可以访问变量 a，但是 a 既不是 foo 函数的局部变量，也不是 foo 函数的参数，所以 a 就是自由变量。

// 那么，函数 foo + foo 函数访问的自由变量 a 不就是构成了一个闭包嘛……

// 还真是这样的！

// 所以在《JavaScript权威指南》中就讲到：从技术的角度讲，所有的JavaScript函数都是闭包。

// 咦，这怎么跟我们平时看到的讲到的闭包不一样呢！？

// 别着急，这是理论上的闭包，其实还有一个实践角度上的闭包，让我们看看汤姆大叔翻译的关于闭包的文章中的定义：

// ECMAScript中，闭包指的是：

// 从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。
// 哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。
// 从实践角度：以下函数才算是闭包：
// 即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）
// 在代码中引用了自由变量
// 接下来就来讲讲实践上的闭包。